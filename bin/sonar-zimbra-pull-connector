#!/usr/bin/env ruby

require 'optparse'
require 'time'

$: << File.join(File.dirname(__FILE__), '..', 'lib')

require 'sonar-zimbra-pull-connector'

OPTIONS = {
  :host => "localhost",
  :username => "root",
  :port => "7307",
  :password => "",
  :socket => "/opt/zimbra/db/mysql.sock",
  :min_date => nil,
  :exclude => "",
  :include => "",
  :target_dir => nil,
  :headers_only => 'y'
}

ARGV.options do |opts|

  script_name = File.basename( $0 )

  opts.banner = "\n\nSonar Zimbra Pull Connector"
  opts.banner += "\n---------------------------\n\n"
  opts.separator "\n"

  opts.banner += "A simple script to export mails from a Zimbra server. This MUST be run on the zimbra server itself, as the zimbra user or root."
  opts.banner += "\n\n\nYou Will Need"
  opts.banner += "\n-------------"
  opts.banner += "\n"
  opts.banner += "\n1) Rubygems"
  opts.banner += "\n2) The mysql gem (gem install mysql)"
  opts.banner += "\n3) Your Zimbra server's Mysql root password (see http://wiki.zimbra.com/wiki/MySql_Password )"

  opts.banner += "\n\nUsage: #{script_name} [ -h <host> ] [ -u <username> ] [ -w <password> ] [ -p <port> ] [ -s <socket> ] [ -t <min date>] [ -x <email addresses to exclude>] [ -i <email addresses to include>] [ -d <target directory>]"
  opts.banner += "\n\nIf you do not specify -i or -x, it will attempt to retrieve emails for all accounts"
  opts.separator "\n"

  opts.on("-h", "--host=name", String,
          "Hostname of the zimbra db",
          "Default: #{OPTIONS[:host]}") { |h| OPTIONS[:host] = h }
  opts.on("-u", "--username=name", String,
          "Username for the zimbra db",
          "Default: #{OPTIONS[:username]}") { |h| OPTIONS[:username] = h }
  opts.on("-p", "--port=number", String,
          "Port for the zimbra db connection",
          "Default: #{OPTIONS[:port]}") { |h| OPTIONS[:port] = h }
  opts.on("-w", "--password=pwd", String,
          "Password for the zimbra db"
          ) { |h| OPTIONS[:password] = h }
  opts.on("-s", "--socket=path", String,
          "Path to the MySQL socket",
          "Default: #{OPTIONS[:socket]}") { |h| OPTIONS[:socket] = h }
  opts.on("-t", "--min-date=date", String,
          "Only get emails after this date"
	  ) { |h| OPTIONS[:min_date] = h }
  opts.on("-x", "--exclude=email_addresses", String,
          "Comma-delimited list of email addresses to exclude"
	  ) { |h| OPTIONS[:exclude] = h }
  opts.on("-i", "--include=email_addresses", String,
          "Comma-delimited list of email addresses to include"
          ) { |h| OPTIONS[:include] = h }
	  
  opts.on("-d", "--target-dir=path", String,
          "Path to an output directory.",
	  "If given, all matching rfc822 files will be copied to this directory.",
	  "NOTE: Zimbra stores its mail files with very restrictive permissions.",
	  "Therefore, if you supply the -d option, you MUST run this script as",
	  "the zimbra user or root.",
	  "If not given, the filenames of matching rfc822 files will be written to STDOUT."
	  ) { |h| OPTIONS[:target_dir] = h }

  opts.on("-o", "--headers-only=<y|n>", String,
          "Ignored unless -d|--target-dir is given.",
	  "If y, all body content and subject lines will be stripped from the outputted rfc822 files.",
	  "If n, rfc822 files will be copied to the target directory as-is.",
          "Default: #{OPTIONS[:headers_only]}") { |h| OPTIONS[:headers_only] = h.downcase unless h.to_s.empty? }

  examples = <<-END
  \n\n\nExamples:\n---------\n
1) To export full mail bodies of all mails for test@some.com and joe@bloggs.com into /tmp/mail_dump/

      ruby #{script_name} --password=(zimbra root mysql pwd) --include=test@some.com,joe@bloggs.com --target-dir=/tmp/mail_dump/

2) To export just the headers of all mails for user test@some.com since 1st November 2009 into /tmp/mail_dump
      
      ruby #{script_name} --password=(zimbra root mysql pwd) --include=test@some.com --min-date=01-11-2009 --target-dir=/tmp/mail_dump/ --headers-only=y
      
   or, with more compact argument syntax:

      ruby #{script_name} -w (zimbra root mysql pwd) -i test@some.com -t 01-11-2009 -d /tmp/mail_dump/ -o y
  END

  opts.separator ""
  opts.banner += examples
  opts.separator ""

  opts.banner += "\n\nFull Parameter List"
  opts.banner += "\n---------------------"

  opts.parse!
end

def process_mail( mail, target_dir, headers_only )
  if target_dir.to_s.empty?
    STDOUT << mail['absolute_path'] << "\n" 
  else
    target_path = File.join(target_dir, mail['relative_path'])
    FileUtils.mkdir_p( File.dirname(target_path) )

    if headers_only.downcase == 'y'
      content = File.read(mail['absolute_path'])
      s = "mail #{mail['relative_path']} is #{content.size} bytes long, "

      content = Zimbra::Mail.headers( content )
      content = Zimbra::Mail.strip_subject( content )
      s = "#{s} stripped to #{content.size} bytes long, "

      log "#{s}\n\t writing to #{target_path}"

      File.open( target_path, 'w' ){ |f| f.write(content) }
    else
      # log "copying #{mail['absolute_path']} to #{target_dir}"
      FileUtils.cp( mail['absolute_path'], target_path, :preserve=>true, :verbose=>true )
    end
  end
end

def sync_mails( db, user, volumes, min_date = nil, target_dir=nil, headers_only="n")
#  mailbox_name = Zimbra::Users.mailbox_name( user['id'] )
  
  begin
    folders = Zimbra::Folders.get_folders( db, user )
    log "got #{folders.length} folders to look in" 
  
    mails = Zimbra::Folders.get_mails_from_folders( db, user, folders, volumes, min_date )
    log "got #{mails.length} mails for #{user['comment']}"
    
    mails.each{ |mail| 
      process_mail( mail, target_dir, headers_only )
    }
    
  rescue
    log "couldn't get mails for user #{user['id']} - #{user['comment']}"
    log "error was #{$!.inspect}"
  end
  
end

  
def log(s)
  STDERR << s << "\n"
end


######################################
# ACTUAL PROCESS STARTS HERE!
######################################

begin
  dbc = Zimbra::MySqlHelper.db_connection( OPTIONS )
  
  include_addresses = OPTIONS[:include].split(",")
  exclude_addresses = OPTIONS[:exclude].split(",")
  
  volumes = Zimbra::ZDB.get_volumes( dbc )
  users = Zimbra::Users.get_users(dbc, include_addresses, exclude_addresses )
  
  min_date = nil
  min_date_log = ""
  unless OPTIONS[:min_date].to_s.empty?
    begin
      min_date = Time.parse( OPTIONS[:min_date] )
      min_date_log = " since #{min_date.to_s}"
    rescue
      raise "INVALID DATE - couldn't parse '#{OPTIONS[:min_date]}'"
    end
  end
  
  log "got #{users.length} users"
  
  users.each do |user|
    log "extracting mails for #{user['comment']} #{min_date_log} "
    sync_mails( dbc, user, volumes, min_date, OPTIONS[:target_dir], OPTIONS[:headers_only] )
    log ""
  end
    
rescue Mysql::Error => e
  puts "Error code: #{e.errno}"
  puts "Error message: #{e.error}"
  puts "Error SQLSTATE: #{e.sqlstate}" if e.respond_to?("sqlstate")
ensure
  # must always ensure that we close the db connection
  dbc.close() if dbc
end


